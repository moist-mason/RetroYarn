import io.github.moistmason.retroyarn.tasks.*
import io.github.moistmason.retroyarn.util.*

plugins {
    id 'java-library'
    id 'java-gradle-plugin'
}

group 'io.github.moistmason'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url = 'https://maven.neoforged.net' }
    maven { url = 'https://maven.fabricmc.net' }
}

task downloadVersionManifest (type: Download) {
    src = new URL("https://piston-meta.mojang.com/mc/game/version_manifest_v2.json")
    dest = file('versions/version_manifest.json')
}

subprojects {
    logger.lifecycle(project.name)

    repositories {
        mavenCentral()
        maven { url = 'https://maven.fabricmc.net'}
    }

    configurations {
        enigma
        mergetool
        stitch
        remapper
    }

    dependencies {
        enigma 'cuchaz:enigma-cli:2.5.2:all'
        mergetool 'net.neoforged:mergetool:2.0.6:fatjar'
        stitch 'net.fabricmc:stitch:0.6.2:all'
        remapper 'net.fabricmc:tiny-remapper:0.9.0:fat'
    }

    ext {
        FABRIC_MANIFEST = '../fabric_manifest.json'
        VERSION_MANIFEST = '../version_manifest.json'
        VERSION = project.name
        VERSION_DIR = projectDir.absolutePath

        JSON = VERSION_DIR + '/data/version.json'
        CLIENT = VERSION_DIR + '/data/client.jar'
        SERVER = VERSION_DIR + '/data/server.jar'
        MERGED = VERSION_DIR + '/data/merged.jar'
        INTERMEDIARY = VERSION_DIR + '/data/intermediary.jar'
        YARN = VERSION_DIR + '/data/yarn.jar'

        INTERMEDIARY_MAPPINGS = VERSION_DIR + '/mappings/intermediary.tiny'
        YARN_MAPPINGS = VERSION_DIR + '/mappings/yarn.tiny'
    }

    GradleIo.init()

    task downloadIntermediary (type: Download) {
        inputs.file file(FABRIC_MANIFEST)
        src = new URL(file(FABRIC_MANIFEST).json.versions.find { ver -> ver.id == VERSION }.intermediary)
        dest = file(VERSION_DIR + '/mappings/intermediary.jar')
    }

    task downloadYarn (type: Download) {
        src = new URL(file(FABRIC_MANIFEST).json.versions.find { ver -> ver.id == VERSION }.yarn)
        dest = file(VERSION_DIR + '/mappings/yarn.jar')
    }

    task extractIntermediary (type: Copy, dependsOn: downloadIntermediary) {
        from (zipTree(downloadIntermediary.dest).filter { f -> f.name == 'mappings.tiny' })
        destinationDir file(VERSION_DIR + '/mappings/')
        rename { it.replace('mappings', 'intermediary') }
    }

    task extractYarn (type: Copy, dependsOn: downloadYarn) {
        from (zipTree(downloadYarn.dest).filter { f -> f.name == 'mappings.tiny' })
        destinationDir file(VERSION_DIR + '/mappings/')
        rename { it.replace('mappings', 'yarn') }
    }

    task extractAll (dependsOn: [extractYarn, extractIntermediary]) { }

    // 1.14 - 1.14.2 have their mappings reversed, so we need to fix that.
    task reverse (type: JavaExec) {
        classpath = files(project.getConfigurations().getByName('stitch'))
        main = 'net.fabricmc.stitch.Main'

        // rename old yarn to temp.tiny. Swap the two headers in the final file
        args ('reorderTinyV2', VERSION_DIR + '/mappings/temp.tiny', YARN_MAPPINGS, 'named', 'intermediary')
    }


    task downloadJson (type: DownloadJson, dependsOn: rootProject.downloadVersionManifest) {
        inputs.file file(VERSION_MANIFEST)
        manifest = file(VERSION_MANIFEST)
        dest = file(JSON)
    }

    def sides = ['client', 'server']

    sides.each { s ->
        def downloadJar = task "download${s.capitalize()}" (type: DownloadJar, dependsOn: downloadJson) {
            inputs.file file(JSON)
            side = s
            versionJson = file(JSON)
            dest = file(VERSION_DIR + '/data/' + s + '.jar')
        }
    }

    task downloadJars(dependsOn: ['downloadClient', 'downloadServer']) { }

    task merge(type: JavaExec, dependsOn: downloadJars) {
        classpath = files(project.getConfigurations().getByName('mergetool'))
        main = 'net.neoforged.mergetool.ConsoleTool'
        args('merge', CLIENT, SERVER, MERGED)
    }

    task mapIntermediary (type: JavaExec, dependsOn: merge) {
        classpath = files(project.getConfigurations().getByName('enigma'))
        main = 'cuchaz.enigma.command.Main'
        args ('deobfuscate', MERGED, INTERMEDIARY, INTERMEDIARY_MAPPINGS)
    }

    task mapYarn (type: JavaExec, dependsOn: mapIntermediary) {
        classpath = files(project.getConfigurations().getByName('enigma'))
        main = 'cuchaz.enigma.command.Main'
        args ('deobfuscate', INTERMEDIARY, YARN, YARN_MAPPINGS)
    }

    /*
     * Creates status file of how many classes, fields, and methods are mapped in the Yarn file.
     */

    task checkStatus(type: MappingStatus) {
        mcVersion = project.name
        tiny = file(YARN_MAPPINGS)
        log = file(VERSION_DIR + '/mappings/status.txt')
    }

    task writeCsv(type: WriteCsv) {
        tiny = file(YARN_MAPPINGS)
        classCsv = file(VERSION_DIR + '/mappings/csv/classes.csv')
        fieldCsv = file(VERSION_DIR + '/mappings/csv/fields.csv')
        methodCsv = file(VERSION_DIR + '/mappings/csv/methods.csv')
    }

    task downloadLibraries (type: DownloadLibraries, dependsOn: downloadJson) {
        versionJson = downloadJson.dest
        paths = file(VERSION_DIR + '/data/libraries.txt')
        directory = new File(project.rootDir, '/lib/')
    }

    clean {
        delete(files(CLIENT))
        delete(files(INTERMEDIARY))
        delete(files(YARN))
        delete(files(JSON))
        delete(files(VERSION_DIR + '/mappings/intermediary.jar'))
        delete(files(VERSION_DIR + '/mappings/yarn.jar'))
    }
}
